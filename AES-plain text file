from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64
import os

# AES key must be either 16, 24, or 32 bytes long
KEY = os.urandom(32)  # 256-bit key
IV = os.urandom(16)   # Initialization Vector (IV)

def encrypt_text(plain_text):
    cipher = AES.new(KEY, AES.MODE_CBC, IV)
    encrypted_bytes = cipher.encrypt(pad(plain_text.encode(), AES.block_size))
    return base64.b64encode(IV + encrypted_bytes).decode()

def decrypt_text(encrypted_text):
    encrypted_data = base64.b64decode(encrypted_text)
    iv = encrypted_data[:16]
    cipher = AES.new(KEY, AES.MODE_CBC, iv)
    decrypted_bytes = unpad(cipher.decrypt(encrypted_data[16:]), AES.block_size)
    return decrypted_bytes.decode()

# Example Usage
plain_text = "Hello, AES Encryption!"
encrypted_text = encrypt_text(plain_text)
decrypted_text = decrypt_text(encrypted_text)

print(f"Original Text: {plain_text}")
print(f"Encrypted Text: {encrypted_text}")
print(f"Decrypted Text: {decrypted_text}")
