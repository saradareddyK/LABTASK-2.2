from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import os

# AES key must be either 16, 24, or 32 bytes long
KEY = os.urandom(32)  # 256-bit key

def encrypt_file(input_file, output_file):
    iv = os.urandom(16)
    cipher = AES.new(KEY, AES.MODE_CBC, iv)
    
    with open(input_file, "rb") as f:
        plaintext = f.read()
    
    ciphertext = iv + cipher.encrypt(pad(plaintext, AES.block_size))
    
    with open(output_file, "wb") as f:
        f.write(ciphertext)
    
    print(f"File '{input_file}' encrypted successfully!")

def decrypt_file(input_file, output_file):
    with open(input_file, "rb") as f:
        ciphertext = f.read()
    
    iv = ciphertext[:16]
    cipher = AES.new(KEY, AES.MODE_CBC, iv)
    decrypted_data = unpad(cipher.decrypt(ciphertext[16:]), AES.block_size)
    
    with open(output_file, "wb") as f:
        f.write(decrypted_data)
    
    print(f"File '{input_file}' decrypted successfully!")

# Example Usage
encrypt_file("sample.txt", "sample_encrypted.aes")
decrypt_file("sample_encrypted.aes", "sample_decrypted.txt")
